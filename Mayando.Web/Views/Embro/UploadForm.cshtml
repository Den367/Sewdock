@using CaptchaMvc.HtmlHelpers
@using CaptchaMvc.Interface
@using Myembro.Extensions
@using Myembro.Infrastructure
@using Myembro.Properties
@model Myembro.ViewModels.UploadFormViewModel
@{

    ICaptcha captcha = Html.Captcha(Resources.ButtonRefreshText, Resources.FieldInput, 4, Resources.RequiredFieldValidationMessage, false);
}

<div id="uploadform-content">
    @Html.ValidationSummary(Resources.ErrorUploadingText)

    <style>
        .same-row
        {
            display: inline;
            margin: 3%;
        }

        .left-field
        {
            display: block;
            width: 40%;
            margin: 1%;
        }

        .right-field
        {
            float: right;
            width: 40%;
            margin: 1%;
        }

        #upload-embro-fields-container
        {
            width: 100%;
            position: relative;
        }

        #upload-preview-image
        {
            background-image: url(/embro/content/images/bg.png);
            background-repeat: no-repeat;
        }
    </style>

   
    <div id="dialog" title="Upload files">
        @using (Html.BeginForm("Upload", "Embro", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "upload-embro-fields-container", @class = "ajax" }))
        {
            @Html.Hidden("ItemID", value: Model.ItemID)
            @Html.Hidden("Count", value: Model.Count)
            @Html.Hidden("Page", value: Model.Page)
            @Html.Hidden("Criteria", value: Model.Criteria)
            @Html.Hidden("DatePublished", value: DateTime.UtcNow)
            <ul class="attach">
                <li class="file" title="@Resources.SelectAFileText">
                    <div class="browse">
                        <input type="file" id="fileUpload" name="fileUpload" class="file_select" />
                        <input type="button" class="file_select_btn btn" value="@Resources.SelectFileButtonTitle"  />
                    </div>
                </li>
                <li>
                    <input id="file_fake" type="text" readonly="readonly" value="@Resources.EmbroFileToBeUploadName" />
                </li>
            </ul>
            <ul class="attach">
                <li>
                    <div id="embro-preview">
                        <img id="upload-preview-image" onerror="this.onerror=null;this.src='@Url.Content("~/Content/images/bg.png")';"  src='@Html.Raw(Model.Base64Png ?? Url.Content("~/Content/images/bg.png")) ' />
                    </div>
                </li>
            </ul>
            <ul class="attach">
                <li>
                    <label id="label-title" for="Title">@Resources.LabelTitleText</label>
                </li>
                <li>
                    @Html.TextBox("Title", Model.Title, new { @id = "title-textbox" })
                    @Html.ValidationMessage("Title", "*")
                </li>

                <li>

                    <label for="TagList" class="optional">@Resources.TagsFieldLabelText</label>
                </li>
                <li>
                    @Html.TextBox("TagList", "tagme", new { @id = "tagList-textbox", @class = "taglist-field" })
                    <sub>@Resources.TagsFieldHintText</sub>
                </li>
                <li>
                    @Html.ValidationMessage("TagList", "*")
                </li>
                <li>
                    <label for="Article" class="optional">@Resources.UploadArticleCaptionText</label>
                </li>
                <li>
                    @{ Html.RenderPartialHtmlEditor("Article", Model.Article); }
                </li>
                <li>
                    @Html.ValidationMessage("Article", "*")
                </li>
                <li></li>
                <li>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <label for="Hidden" class="required">@Resources.EmbroIsHiddenText</label>
                        @Html.CheckBox("Hidden", Model.Hidden, new { @class = "same-row" })
                        @Html.ValidationMessage("Hidden", "*")
                    }
                </li>
                <li></li>
                <li></li>
                <li></li>
                <li>
                    <input id="submit-upload-embro" type="submit" value="@Resources.UploadButtonText" class="btn" onclick="uploadEmbro(event);"/>
                </li>
            </ul>
      
        }
    </div>

    @*  <script type="text/javascript" src="@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")"></script>
            <script type="text/javascript" src="@Url.Content("~/Scripts/tiny_mce_init.js")" ></script>  *@

    @*   <script src="//tinymce.cachefly.net/4.1/tinymce.min.js"></script>*@
    <script>
        function uploadEmbro(e) {
            e.preventDefault();
            //var tinyMCEEditor = tinyMCE.activeEditor;
            //if (tinyMCEEditor != null) {
            //    var article = tinyMCEEditor.getContent();
            //    alert(article);
            //    $('textarea#Article').html();

            //}
            if ($("input#fileUpload").val() == '') {
                alert("empty input file");
                return false;
            }
            else $('#upload-embro-fields-container').submit();
        }
        function splitNameAndExt(path) {
            var name = path.replace(/^.*[\\\/]/, '');
            name = name.substr(0, name.lastIndexOf('.')) || name;
            var ext = path.split('.').pop();
            return { 'name': name, 'ext': ext };
        }

        $("#fileUpload").change(function () {
            document.getElementById('title-textbox').value = '';
            var path = this.value;
            if (path === null) return;
            var nameInfo = splitNameAndExt(path);
            document.getElementById('file_fake').value = path;
            document.getElementById('tagList-textbox').value = "tagme;" + nameInfo.name + ";" + nameInfo.ext;
            $("#upload-embro-fields-container").submit();

        });
        //$('textarea.text-editor-html').focus(function () {
        //    initTinyMCE();
        //});
        function getDoc(frame) {
            var doc = null;
            // IE8 cascading access check
            try {
                if (frame.contentWindow) {
                    doc = frame.contentWindow.document;
                }
            } catch (err) {
            }
            if (doc) { // successful getting content
                return doc;
            }
            try { // simply checking may throw in ie8 under ssl or mismatched protocol
                doc = frame.contentDocument ? frame.contentDocument : frame.document;
            } catch (err) {
                // last attempt
                doc = frame.document;
            }
            return doc;
        }



        $("#upload-embro-fields-container").submit(function (e) {
            if (e.defaultPrevented) {
                e.unbind();
                return;
            }
            var formObj = $(this);
            var formURL = formObj.attr("action");

            if (window.FormData !== undefined)  // for HTML5 browsers
            {

                var formData = new FormData(this);
                // var title = formData.elements["Title"];
                //console.log(title);
                $.ajax({
                    url: formURL,
                    type: 'POST',
                    data: formData,
                    enctype: "multipart/form-data",
                    // mimeType: "multipart/form-data",
                    contentType: false,
                    cache: false,
                    processData: false,
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    },
                    complete: function (jqXHR, textStatus) {
                        var name = document.getElementById('title-textbox').value;
                        if (name.length == 0) {
                            var img = $("#embro-preview");
                            img.html(jqXHR.responseText);

                            var path = document.getElementById('file_fake').value;
                            var nameInfo = splitNameAndExt(path);
                            document.getElementById('title-textbox').value = nameInfo.name;
                        } else {
                            window.location.reload();
                        }

                    }
                });
                e.preventDefault();

            } else  //for olden browsers
            {
                //generate a random id
                var iframeId = 'unique' + (new Date().getTime());

                //create an empty iframe
                var iframe = $('<iframe src="javascript:false;" name="' + iframeId + '" />');

                //hide it
                iframe.hide();

                //set form target to iframe
                formObj.attr('target', iframeId);

                //Add iframe to body
                iframe.appendTo('body');
                iframe.load(function (e) {
                    var doc = getDoc(iframe[0]);
                    var docRoot = doc.body ? doc.body : doc.documentElement;
                    var data = docRoot.innerHTML;
                    //data is returned from server.

                });

            }
        });



    </script>

</div>

